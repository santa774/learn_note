1.安装Git
Windows上安装Git，下载msysgit：https://git-for-windows.github.io
安装完成后，还需要最后一步设置，创建用户，在命令行输入：
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"


2.创建版本库
$ mkdir gitdemo
$ cd gitdemo
$ pwd   （pwd命令用于显示当前目录）
C:\Users\Administrator\gitdemo

然后通过git init命令把这个目录变成Git可以管理的仓库：
$ git init


3.提交文件
第一步，用命令git add告诉Git，把文件添加到仓库：
$ git add readme.txt
$ git add .   (提交所有问文件)

第二步，用命令git commit告诉Git，把文件提交到仓库：
$ git commit -m "wrote a readme file"         （-m后面输入的是本次提交的说明）


4.版本回退
$ git reset --hard HEAD^     （上一个版本就是HEAD^，上上一个版本就是HEAD^^，往上100个版本，写成HEAD~100。）
$ git reset --hard 3628164    （使用commit id回退到指定的版本，，，版本号没必要写全，前几位就可以了）


5.撤销修改
$ git checkout -- readme.txt   (把工作区的修改全部撤销，回到最后提交的版本)
$ git reset HEAD readme.txt    (把暂存区的修改撤销掉，重新放回工作区)


6.删除文件
$ git rm test.txt
$ git commit -m "remove test.txt"


7.远程仓库
使用GitHub作为远程仓库，本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置
第1步：创建SSH Key ： $ ssh-keygen -t rsa -C "youremail@example.com"  (前提是你需要创建一个用户，参考第一步)
第2步：在用户目录下找到.ssh文件夹，将id_rsa.pub的内容复制下来  (Windows系统的用户目录在 C:\Users\Administrator\)
第3步：登陆GitHub，打开“Account settings”，“SSH Keys”页面，然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
    example:   git remote add origin git@github.com:santa774/gitbook.git
如果关联远程库失败：可能是因为远程库的内容没有同步到本地库，这时可以使用命令：git pull --rebase origin master
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
从远程库克隆：git clone git@github.com:santa774/repository_one.git



8.分支管理
$ git branch    	       (查看当前分支，前面有*号的代表当前指向的分支)
$ git branch branch_name       (创建分支)
$ git checkout branch_name       (切换分支)
$ git branch -b branch_name    (创建并切换分支)
$ git merge branch_name        (合并某分支到当前分支) 
$ git branch -d branch_name    (删除指定的分支)
创建分支并在分支上工作的好处是：提交的修改只作用于当前的分支，这样做更加的安全。确保分支的工作都完成后，就合并到主分支


9.解决冲突
当有冲突的时候，Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容。
需要修改后再提交才能解决冲突
$ git log --graph --pretty=oneline --abbrev-commit    （查看分支的合并情况）


10 分支管理策略
Git合并分支的时候默认使用的是Fast Forward（快进模式），在这种模式下，删掉分支后，会丢失分支的信息。
可以强制禁用Fast Forward模式，这样在merge的时候Git就会生成一个新的commit，就可以在分支历史上看到分支信息。
git merge --no-ff -m "提交的描述" branch_name      （禁用快进模式合并分支）

在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。



**.git命令
$ git status      (git status命令可以让我们时刻掌握仓库当前的状态)
$ git diff readme.txt   (查看difference)
$ git log   (查看提交历史)
$ git log --pretty=oneline    (历史记录显示在一行)
$ git reflog  (查看命令历史)